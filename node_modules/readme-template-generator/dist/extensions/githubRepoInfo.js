"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } async function _asyncOptionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = await fn(value); } else if (op === 'call' || op === 'optionalCall') { value = await fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }





















exports. default = (toolbox) => {
  const {
    filesystem: { read, resolve },
    http: { create },
  } = toolbox

  const pattern = /(https|http):\/\/github\.com\/([A-z0-9]|((?<!\/)-(?!(-|\/))))+\/(\w|-|\.)+/gm

  const api = create({
    baseURL: 'https://api.github.com',
    headers: { Accept: 'application/vnd.github.v4+json' },
  })

  const githubRepoInfo = {
    url: {
      format: url => {
        const lastGitInvalidWord = [false, false]

        const formattedURL = _optionalChain([url
, 'optionalAccess', _ => _.split, 'call', _2 => _2('.')
, 'access', _3 => _3.reverse, 'call', _4 => _4()
, 'access', _5 => _5.filter, 'call', _6 => _6(group => {
            if (group.toLowerCase() === 'git') return lastGitInvalidWord[0]
            lastGitInvalidWord[0] = true
            return true
          })
, 'access', _7 => _7.reverse, 'call', _8 => _8()
, 'access', _9 => _9.join, 'call', _10 => _10('.')

, 'access', _11 => _11.split, 'call', _12 => _12('+')
, 'access', _13 => _13.filter, 'call', _14 => _14(group => {
            if (group.toLowerCase() === 'git') return lastGitInvalidWord[1]
            lastGitInvalidWord[1] = true
            return true
          })
, 'access', _15 => _15.join, 'call', _16 => _16('+')

, 'access', _17 => _17.trim, 'call', _18 => _18()])

        return formattedURL
      },
      test: url => !!_optionalChain([url, 'optionalAccess', _19 => _19.match, 'call', _20 => _20(pattern), 'optionalAccess', _21 => _21.length]),
      inCWD: () => {
        const dir = resolve('.git', 'logs', 'refs', 'remotes', 'origin', 'HEAD')
        const gitFile = read(dir)

        const url = _optionalChain([gitFile, 'optionalAccess', _22 => _22.match, 'call', _23 => _23(pattern), 'access', _24 => _24[0]]) || ''

        return githubRepoInfo.url.format(url)
      },
    },
    information: async (author, name) => {
      const info = {
        haveConnection: false,
        url: null,
        name: null,
        author: null,
        api: {
          index: null,
          contributors: null,
        },
      }

      if (await _asyncOptionalChain([((await api.get('repos')) ), 'optionalAccess', async _25 => _25.data, 'optionalAccess', async _26 => _26.message]))
        info.haveConnection = true

      if (!githubRepoInfo.url.test(`https://github.com/${author}/${name}`))
        return info

      info.url = `https://github.com/${author}/${name}`
      info.name = name
      info.author = author

      info.api.index = await (async () => {
        const { ok, data } = await api.get(`repos/${info.author}/${info.name}`)
        return ok ? data : null
      })()

      info.api.contributors = await (async () => {
        const { ok, data } = await api.get(
          `repos/${info.author}/${info.name}/contributors`
        )
        return ok ? data : null
      })()

      return info
    },
  }

  toolbox.githubRepoInfo = githubRepoInfo
}
